// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyUniqueNature.Data;

namespace MyUniqueNature.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20201223183013_m3")]
    partial class m3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MyUniqueNature.Models.Komentar", b =>
                {
                    b.Property<int>("KomentarID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Negativno")
                        .HasColumnType("int");

                    b.Property<int>("Pozitivno")
                        .HasColumnType("int");

                    b.Property<string>("Sadržaj")
                        .HasColumnType("text");

                    b.Property<int>("slika_FK")
                        .HasColumnType("int");

                    b.HasKey("KomentarID");

                    b.HasIndex("slika_FK");

                    b.ToTable("Komentar");
                });

            modelBuilder.Entity("MyUniqueNature.Models.Korisnik", b =>
                {
                    b.Property<int>("KorisnikID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Datum_Rodjenja")
                        .HasColumnType("datetime");

                    b.Property<string>("Hash")
                        .HasColumnType("text");

                    b.Property<string>("Ime")
                        .HasColumnType("text");

                    b.Property<int>("Lokacija_FK")
                        .HasColumnType("int");

                    b.Property<string>("Prezime")
                        .HasColumnType("text");

                    b.Property<string>("Salt")
                        .HasColumnType("text");

                    b.Property<int>("Uloga_FK")
                        .HasColumnType("int");

                    b.HasKey("KorisnikID");

                    b.HasIndex("Lokacija_FK");

                    b.HasIndex("Uloga_FK");

                    b.ToTable("Korisnik");
                });

            modelBuilder.Entity("MyUniqueNature.Models.Lokacija", b =>
                {
                    b.Property<int>("LokacijaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .HasColumnType("text");

                    b.HasKey("LokacijaID");

                    b.ToTable("Lokacija");
                });

            modelBuilder.Entity("MyUniqueNature.Models.Oznaka", b =>
                {
                    b.Property<int>("OznakaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .HasColumnType("text");

                    b.HasKey("OznakaID");

                    b.ToTable("Oznaka");
                });

            modelBuilder.Entity("MyUniqueNature.Models.Slika", b =>
                {
                    b.Property<int>("SlikaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BrojPregleda")
                        .HasColumnType("int");

                    b.Property<int>("BrojPreuzimanja")
                        .HasColumnType("int");

                    b.Property<DateTime>("DatumPostavljanja")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DatumSlikanja")
                        .HasColumnType("datetime");

                    b.Property<string>("Dimenzije")
                        .HasColumnType("text");

                    b.Property<bool>("Izmijenjena")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Lokacija_FK")
                        .HasColumnType("int");

                    b.Property<byte[]>("Materijal")
                        .HasColumnType("varbinary(4000)");

                    b.Property<int>("Ocjena")
                        .HasColumnType("int");

                    b.Property<bool>("SkoroObjavljena")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Uredjaj_FK")
                        .HasColumnType("int");

                    b.Property<string>("Veličina")
                        .HasColumnType("text");

                    b.HasKey("SlikaID");

                    b.HasIndex("Lokacija_FK");

                    b.HasIndex("Uredjaj_FK");

                    b.ToTable("Slika");
                });

            modelBuilder.Entity("MyUniqueNature.Models.Uloga", b =>
                {
                    b.Property<int>("UlogaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .HasColumnType("text");

                    b.HasKey("UlogaID");

                    b.ToTable("Uloga");
                });

            modelBuilder.Entity("MyUniqueNature.Models.Uredjaj", b =>
                {
                    b.Property<int>("UredjajID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .HasColumnType("text");

                    b.HasKey("UredjajID");

                    b.ToTable("Uredjaj");
                });

            modelBuilder.Entity("MyUniqueNature.Models.slika_oznaka", b =>
                {
                    b.Property<int>("slika_oznakaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Oznaka_FK")
                        .HasColumnType("int");

                    b.Property<int>("Slika_FK")
                        .HasColumnType("int");

                    b.HasKey("slika_oznakaID");

                    b.HasIndex("Oznaka_FK");

                    b.HasIndex("Slika_FK");

                    b.ToTable("Slika_Oznaka");
                });

            modelBuilder.Entity("MyUniqueNature.Models.Komentar", b =>
                {
                    b.HasOne("MyUniqueNature.Models.Slika", "slika")
                        .WithMany()
                        .HasForeignKey("slika_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyUniqueNature.Models.Korisnik", b =>
                {
                    b.HasOne("MyUniqueNature.Models.Lokacija", "lokacija")
                        .WithMany()
                        .HasForeignKey("Lokacija_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyUniqueNature.Models.Uloga", "uloga")
                        .WithMany()
                        .HasForeignKey("Uloga_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyUniqueNature.Models.Slika", b =>
                {
                    b.HasOne("MyUniqueNature.Models.Lokacija", "lokacija")
                        .WithMany()
                        .HasForeignKey("Lokacija_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyUniqueNature.Models.Uredjaj", "uredjaj")
                        .WithMany()
                        .HasForeignKey("Uredjaj_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyUniqueNature.Models.slika_oznaka", b =>
                {
                    b.HasOne("MyUniqueNature.Models.Oznaka", "oznaka")
                        .WithMany()
                        .HasForeignKey("Oznaka_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyUniqueNature.Models.Slika", "slika")
                        .WithMany()
                        .HasForeignKey("Slika_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
